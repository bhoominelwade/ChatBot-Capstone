{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ammar Abdulhussain\\\\Desktop\\\\phullstack\\\\src\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { auth } from './firebase';\nimport { onAuthStateChanged } from 'firebase/auth';\nimport { doc, getDoc } from 'firebase/firestore';\nimport { db } from './firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Function to handle admin login\n  const loginAdmin = email => {\n    setUser({\n      uid: 'admin',\n      email: email,\n      role: 'admin',\n      name: 'Administrator'\n    });\n    // Store admin session in localStorage\n    localStorage.setItem('adminSession', 'true');\n    setLoading(false);\n  };\n  useEffect(() => {\n    // Check for admin session first\n    const adminSession = localStorage.getItem('adminSession');\n    if (adminSession) {\n      loginAdmin('admin@test.com');\n      return;\n    }\n\n    // Regular Firebase auth listener\n    const unsubscribe = onAuthStateChanged(auth, async firebaseUser => {\n      if (firebaseUser) {\n        try {\n          const userDoc = await getDoc(doc(db, 'Users', firebaseUser.uid));\n          if (userDoc.exists()) {\n            const userData = userDoc.data();\n            setUser({\n              uid: firebaseUser.uid,\n              email: firebaseUser.email,\n              ...userData\n            });\n          }\n        } catch (error) {\n          console.error('Error fetching user data:', error);\n          setUser(null);\n        }\n      } else {\n        setUser(null);\n      }\n      setLoading(false);\n    });\n    return () => unsubscribe();\n  }, []);\n  const logout = async () => {\n    // Clear admin session if exists\n    localStorage.removeItem('adminSession');\n    // Sign out from Firebase if not admin\n    if (!localStorage.getItem('adminSession')) {\n      await auth.signOut();\n    }\n    setUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      loading,\n      loginAdmin,\n      logout\n    },\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","auth","onAuthStateChanged","doc","getDoc","db","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","loginAdmin","email","uid","role","name","localStorage","setItem","adminSession","getItem","unsubscribe","firebaseUser","userDoc","exists","userData","data","error","console","logout","removeItem","signOut","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/Ammar Abdulhussain/Desktop/phullstack/src/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { auth } from './firebase';\r\nimport { onAuthStateChanged } from 'firebase/auth';\r\nimport { doc, getDoc } from 'firebase/firestore';\r\nimport { db } from './firebase';\r\n\r\nconst AuthContext = createContext(null);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Function to handle admin login\r\n  const loginAdmin = (email) => {\r\n    setUser({\r\n      uid: 'admin',\r\n      email: email,\r\n      role: 'admin',\r\n      name: 'Administrator'\r\n    });\r\n    // Store admin session in localStorage\r\n    localStorage.setItem('adminSession', 'true');\r\n    setLoading(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check for admin session first\r\n    const adminSession = localStorage.getItem('adminSession');\r\n    if (adminSession) {\r\n      loginAdmin('admin@test.com');\r\n      return;\r\n    }\r\n\r\n    // Regular Firebase auth listener\r\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\r\n      if (firebaseUser) {\r\n        try {\r\n          const userDoc = await getDoc(doc(db, 'Users', firebaseUser.uid));\r\n          if (userDoc.exists()) {\r\n            const userData = userDoc.data();\r\n            setUser({\r\n              uid: firebaseUser.uid,\r\n              email: firebaseUser.email,\r\n              ...userData\r\n            });\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching user data:', error);\r\n          setUser(null);\r\n        }\r\n      } else {\r\n        setUser(null);\r\n      }\r\n      setLoading(false);\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  const logout = async () => {\r\n    // Clear admin session if exists\r\n    localStorage.removeItem('adminSession');\r\n    // Sign out from Firebase if not admin\r\n    if (!localStorage.getItem('adminSession')) {\r\n      await auth.signOut();\r\n    }\r\n    setUser(null);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, loading, loginAdmin, logout }}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}